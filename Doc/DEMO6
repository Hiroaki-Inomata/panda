アプリケーション連携のデモについて

1. 動かし方

(0) PostgreSQLの準備を行う

・portmasterが起動出来ること
・ORCAというデータベースが存在していること

    $ psql < adrs.create

  適当にデータを作っておく。

    $ psql ORCA
    ORCA=>insert into adrs values('ogochan1','070-xxxx-7514','ogochan');
    ORCA=>insert into adrs values('ogochan2','070-xxxx-7514','ogochan');
    ORCA=>insert into adrs values('ogochan3','070-xxxx-7514','ogochan');
    ORCA=>\q

(1) pandaをbuildする

	$ ./configure --with-opencobol --with-dotcobol --with-postgres
	$ make

(2) 認証サーバを起動する

	$ cd ./auth
	$  ./glauth &

	あらかじめ、gluseraddでパスワードファイルは作っておくこと

(3) アプリサーバを起動する

	$ export APS_HANDLER_LOAD_PATH=.:~/panda/aps/.libs/
	$ cd ./samples/sample2
	$ ../aps/aps -db ORCA sample

	OpenCOBOLを使う場合には、アプリサーバを起動する前に、

	$ export COB_LIBRARY_PATH=.:../aps/.libs/

	のようにして、OpenCOBOLのdynamic loading pathを指定しておくこと

(4) WFCを起動する

	$ cd ./samples/sample2
	$ ~/panda/wfc/wfc

	(3) (4)を一気に、

	$ export COB_LIBRARY_PATH=.:../../aps/.libs/ ; ~/panda/tools/monitor -ApsPath ~/panda/aps/aps -WfcPath ~/panda/wfc/wfc -dir ~/panda/samples/sample1/directory

	のように起動することも出来ます

(5) pgserverを起動する

	$ export MONPS_LOAD_PATH=.:~/panda/libs/.libs/
	$ cd ./samples/sample2
	$ ~/panda/pgserver/pgserver

(6) テストプログラムを起動する

	$ ruby ~/panda/pgserver/montest.rb

2. 環境の説明

(1) ソース

  デモのソースは、./samples/sample2にあります。このデモでは

	SAMPLE1.CBL

  のプログラムを使います。その他にdotCOBOLの場合は

	MCPMAIN.CBL
	MCPSUB.CBL

  を使います。

  COPY句は適当に見て下さい。コンパイルするには、./samples/sample2にて

	$ make all

と打てばCOPY句も含めて全てのファイルが生成されます。また、

	$ make -f Makefile.OC all

と打てばOpenCOBOLのコードを生成します

  COBOLプログラムは、EUCコードで保存される必要があります。文字が化ける時
は文字コードを調べてみます。

(2) レコード定義ファイル

	adrs.db
	metadb.db

(3) 起動パラメータ

  起動パラメータを見るには、各プログラムを-?というパラメータを指定して起
動して下さい。設定されているパラメータを表示して終了します。

(4) 環境変数

APS_HANDLER_LOAD_PATH

	   APS言語ハンドラのある場所を指定します。言語ハンドラの拡張子は.so
	です。

MONPS_LOAD_PATH

	  glserverのアプリケーションモジュールのある場所を指定します。wfc
	にインターフェイスするモジュールはpandaという名称なので、panda.so
	のある場所を指定します。

COB_LIBRARY_PATH

	  OpenCOBOLで書かれたアプリケーションの存在する場所を指定します。

3. デモの内容

  DEMO2で行ったことをプログラムから行います。
