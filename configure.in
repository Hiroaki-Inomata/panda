AC_INIT(configure.in)

dnl AM_INIT_AUTOMAKE is in aclocal.m4

PACKAGE=panda

# make version
MAJOR_VERSION=1
MINOR_VERSION=2
MICRO_VERSION=3

VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
LTVERSION=`expr $MAJOR_VERSION + $MINOR_VERSION`:$MICRO_VERSION:$MINOR_VERSION

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(LTVERSION)

AM_CONFIG_HEADER(config.h)

CONFDIR=`expr $sysconfdir`
AC_SUBST(CONFDIR)

AC_DEFINE_UNQUOTED(PACKAGE,"$PACKAGE","")
AC_DEFINE_UNQUOTED(VERSION,"$VERSION","")
AC_DEFINE_UNQUOTED(CONFDIR,"$CONFDIR","")

# Initialize automake stuff
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET

# Specify a configuration file
AC_HEADER_STDC
AC_CHECK_HEADERS([crypt.h errno.h])
AC_CHECK_LIB(dl,dlopen)
AC_CHECK_LIB(pthread,pthread_create)
AC_CHECK_LIB(crypt,crypt)

# Checks for library functions.
AC_CHECK_FUNCS([strerror])

dnl ***************************************************************************
dnl checking libmagic
dnl ***************************************************************************
have_libmagic=false
AC_CHECK_HEADERS(magic.h,[AC_CHECK_LIB(magic, magic_open, have_libmagic=true)])
if ! ${have_libmagic}; then
   AC_MSG_ERROR([libmagic in 'file' is required. if you use Debian GNU/Linux, libmagic is contained 'libmagic-dev' package.])
fi

dnl ***************************************************************************
dnl Gnome Support (use --disable-gnome to disable).
dnl (Use "#ifdef USE_GNOME" in Glade for Gnome-specific code.)
dnl ***************************************************************************

AC_ARG_ENABLE(gnome,
  [  --disable-gnome         disable gnome support [[enable]]],,[enable_gnome="yes"])
if test "x$enable_gnome" = "xyes"; then
    AC_PATH_PROG(gnome_config, gnome-config)
    if test "x$gnome_config" = "x"; then
        enable_gnome="no"
    fi
fi

if test "x$enable_gnome" = "xyes"; then
    have_gnome="yes"
    AC_DEFINE(USE_GNOME,,"")
else
    have_gnome="no"
fi

AC_ARG_ENABLE(client,
  [  --disable-client        disable build client [[enable]]],,[enable_client="yes"])
if test "x$enable_client" = "xyes"; then
	AC_PATH_PROG(GTK_PANDA_CONFIG, gtkpanda-config, no)
	if test x$GTK_PANDA_CONFIG = xno; then
	  AC_MSG_ERROR(Couldn't find gtkpanda-config)
	fi
	GTK_PANDA_CFLAGS=`$GTK_PANDA_CONFIG --cflags 2>/dev/null`
	GTK_PANDA_LIBS=`$GTK_PANDA_CONFIG --libs 2>/dev/null`
	AC_SUBST(GTK_PANDA_LIBS)
	AC_SUBST(GTK_PANDA_CFLAGS)
	AC_DEFINE(USE_PANDA,1,"")

	AC_PATH_PROG(GLADE_PANDA_CONFIG,libglade-panda-config,no)
	if test x$GLADE_PANDA_CONFIG = xno; then
	  AC_MSG_ERROR(Couldn't find libglade-panda-config)
	fi
	if test "x$have_gnome" = "xyes"; then
	  GLADE_LIBS=`libglade-panda-config --libs gnome`
	  GLADE_CFLAGS=`libglade-panda-config --cflags gnome`
	else
	  GLADE_LIBS=`libglade-panda-config --libs`
	  GLADE_CFLAGS=`libglade-panda-config --cflags`
	fi
	AC_SUBST(GLADE_LIBS)
	AC_SUBST(GLADE_CFLAGS)
	AC_PATH_PROG(XML_CONFIG,xml-config,no)
	if test x$XML_CONFIG = xno; then
	  AC_MSG_ERROR(Couldn't find xml-config)
	fi
	XML_LIBS=`xml-config --libs`
	XML_CFLAGS=`xml-config --cflags`
	AC_SUBST(XML_LIBS)
	AC_SUBST(XML_CFLAGS)
	old_LIBS="$LIBS"
	LIBS="$XML_LIBS $LIBS"
	AC_CHECK_FUNC(xmlSAXUserParseFile,,
	AC_MSG_ERROR([*** libxml >= 1.7.2 is required to compile libglade]))
	LIBS="$old_LIBS"
	GLCLIENT="glclient"
else
	GLCLIENT=""
fi
AC_SUBST(GLCLIENT)
AM_PATH_GTK(1.2.0)

dnl *************************************************************************** 
dnl Add all the cflags & libs needed for the PostgreSQL 
dnl *************************************************************************** 
 
enable_postgres="no"
AC_ARG_WITH(postgres, 
[  --with-postgres=<directory> use postgres backend in <directory>],[
if test $withval != yes 
then 
  dir=$withval 
else 
  dir="/usr/local/" 
fi 
AC_MSG_CHECKING(for Postgres files) 
postgresdir="" 
for d in $dir /usr /usr/local/postgres /opt/postgres /opt/packages/postgres /disk/postgres /usr/local/pgsql 
do 
  if test -f $d/lib/libpq.so 
  then 
      AC_MSG_RESULT(found Postgres in $d) 
      postgresdir=$d 
      break 
  fi 
done 
if test x$postgresdir = x 
then 
  AC_MSG_WARN(Postgres backend not used) 
else 
  if test -f ${postgresdir}/include/libpq-fe.h 
  then 
      POSTGRES_CFLAGS=-I${postgresdir}/include 
  elif test -f ${postgresdir}/include/pgsql/libpq-fe.h 
  then 
      POSTGRES_CFLAGS=-I${postgresdir}/include/pgsql 
  elif test -f ${postgresdir}/include/postgresql/libpq-fe.h 
  then 
      POSTGRES_CFLAGS=-I${postgresdir}/include/postgresql 
  else 
      AC_MSG_WARN(Postgres include files not found, backend not used) 
      postgresdir="" 
  fi 
  POSTGRES_LIBS="-L${postgresdir}/lib -lpq" 
  AC_DEFINE(HAVE_POSTGRES,1,"") 
  enable_postgres="yes"
fi 
 
#AM_CONDITIONAL(POSTGRES, test x$postgresdir != x) 
AC_SUBST(POSTGRES_LIBS) 
AC_SUBST(POSTGRES_CFLAGS) 
])

dnl ***************************************************************************
dnl shell driver
dnl ***************************************************************************

AC_ARG_ENABLE(shell,
    [  --disable-shell         disable shell driver [[enable]]],,[enable_shell="yes"])
if test "x$enable_shell" = "xyes"; then
   AC_DEFINE(USE_SHELL,1,"")
fi

dnl *************************************************************************** 
dnl for the dotCOBOL
dnl *************************************************************************** 
 
enable_dotcobol="no"
AC_ARG_WITH(dotcobol, 
[  --with-dotcobol=<directory> use dotCOBOL in <directory>],[
	if test $withval != yes 
	then 
	  dir=$withval 
	else 
	  dir="/usr/local" 
	fi 
	AC_MSG_CHECKING(for dotCOBOL files) 
	dotcoboldir="" 
	for d in $dir /usr /usr/local /usr/local/dotcobol /opt/dotcobol /opt/packages/dotcobol /disk/dotcobol
	do 
	  if test -f $d/bin/fcu
	  then 
	      AC_MSG_RESULT(found dotCOBOL in $d) 
	      dotcoboldir=$d 
	      break 
	  fi 
	done 
	if test x$dotcoboldir = x 
	then 
	  AC_MSG_WARN(dotCOBOL not used) 
	else 
	  DOTCOBOL_COMMAND="${dotcoboldir}/bin/fcu"
	  AC_DEFINE(HAVE_DOTCOBOL,,"")
          enable_dotcobol="yes"
	fi 
 
#	AM_CONDITIONAL(DOTCOBOL, test x$dotcoboldir != x) 
	AC_SUBST(DOTCOBOL_COMMAND) 
]) 

dnl *************************************************************************** 
dnl for the OpenCOBOL
dnl *************************************************************************** 

AC_ARG_ENABLE(opencobol,
  [  --enable-opencobol      enable OpenCOBOL [[disable]]],,[enable_opencobol="no"])
if test "x$enable_opencobol" = "xyes"; then
    AC_MSG_CHECKING(for OpenCOBOL)
    cob_exists=yes
    cob-config --version > /dev/null 2> /dev/null || cob_exists=no
    if test "x$cob_exists" = "xyes"; then
        COB_CFLAGS="`cob-config --cflags`"
        COB_LIBS="`cob-config --libs`"
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_OPENCOBOL,1,"")
    else
        AC_MSG_RESULT(no)
        enable_opencobol="no"
    fi
    AC_SUBST(COB_CFLAGS)
    AC_SUBST(COB_LIBS)
    
    OPENCOBOL_CFLAGS="$COB_CFLAGS"
    OPENCOBOL_LIBS="$COB_LIBS"
    
    AM_CONDITIONAL(OPENCOBOL, test "x$enable_opencobol" = "xyes") 
    AC_SUBST(OPENCOBOL_LIBS) 
    AC_SUBST(OPENCOBOL_CFLAGS) 
fi

dnl *************************************************************************** 
dnl for Ruby
dnl *************************************************************************** 

enable_ruby="no"
AC_ARG_WITH(ruby, 
[  --with-ruby=PATH        path to ruby],[
    if test "x$withval" = "xyes"; then
      AC_PATH_PROG(RUBY, ruby, no)
    else
      AC_MSG_CHECKING(for ruby)
      RUBY="$withval"
      AC_MSG_RESULT($RUBY)
    fi
    if test "x$RUBY" != "xno"; then
      AC_MSG_CHECKING(for ruby version >= 1.8.0)
      if $RUBY -e 'exit(RUBY_VERSION >= "1.8.0" ? 0 : 1)'; then
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        AC_MSG_ERROR(Ruby version is too old)
      fi
      archdir=`$RUBY -r rbconfig -e 'print Config::CONFIG[["archdir"]]'`
      if test -f $archdir/ruby.h; then
        AC_DEFINE(HAVE_RUBY,1,"")
        enable_ruby="yes"
        RUBY_CFLAGS="-I${archdir}"
        RUBY_SHARED=`$RUBY -r rbconfig -e 'print Config::CONFIG[["ENABLE_SHARED"]]'`
        if test "$RUBY_SHARED" = "yes"; then
          RUBY_LIBS=`$RUBY -r rbconfig -e 'print "-L" + Config::CONFIG[["libdir"]] + " " + Config::CONFIG[["LIBRUBYARG"]].gsub(/-L\./, "-L" + Config::CONFIG[["libdir"]]) + " " + Config::CONFIG[["LIBS"]]'`
          RUBY_EXT_LIBS="$RUBY_LIBS"
        else
          RUBY_LIBS=`$RUBY -r rbconfig -e 'print Config::CONFIG[["libdir"]] + "/" + Config::CONFIG[["LIBRUBY_A"]] + " " + Config::CONFIG[["LIBS"]]'`
          RUBY_EXT_LIBS=`$RUBY -r rbconfig -e 'Config::CONFIG[["LIBS"]]'`
        fi
        rubylibdir=`$RUBY -r rbconfig -e 'print Config::CONFIG[["rubylibdir"]]'`
        rubyarchdir=`$RUBY -r rbconfig -e 'print Config::CONFIG[["archdir"]]'`
      else
        AC_MSG_ERROR(ruby.h not found)
      fi
    fi
    AC_SUBST(RUBY) 
    AC_SUBST(RUBY_CFLAGS) 
    AC_SUBST(RUBY_SHARED)
    AC_SUBST(RUBY_LIBS)
    AC_SUBST(RUBY_EXT_LIBS)
    AC_SUBST(rubylibdir) 
    AC_SUBST(rubyarchdir) 
],[
    AC_MSG_CHECKING(for ruby)
    AC_MSG_RESULT(no)
])

dnl ***************************************************************************
dnl pty message display
dnl ***************************************************************************

AC_ARG_ENABLE(pty,
  [  --enable-pty            enable pty message [[disable]]],,[enable_pty="no"])
if test "x$enable_pty" = "xyes"; then
    AC_DEFINE(USE_PTY,1,"")
fi

dnl ***************************************************************************
dnl IP v6
dnl ***************************************************************************

AC_ARG_ENABLE(ipv6,
  [  --enable-ipv6           enable IP v6 [[disable]]],,[enable_ipv6="no"])
if test "x$enable_ipv6" = "xyes"; then
    AC_DEFINE(USE_IPv6,1,"")
fi

dnl ***************************************************************************
dnl SSL
dnl ***************************************************************************

enable_ssl="no"
AC_ARG_WITH(ssl,
	[  --with-ssl=<directory>  use SSL in <directory>],[
	if test x$withval = xyes; then
		AC_MSG_CHECKING(for OpenSSL files) 
		ssldir="" 
		for d in $dir /usr /usr/local/ssl /opt/ssl /opt/packages/ssl /disk/ssl
		do 
		  if test -f $d/lib/libssl.so 
		  then 
		      AC_MSG_RESULT(found OpenSSL lib in $d) 
		      ssldir=$d 
		      break 
		  fi 
		done 
		if test x$ssldir = x 
		then 
			AC_MSG_WARN(SSL not used) 
		else 
			if test -f $ssldir/include/openssl/ssl.h
			then 
			   	AC_MSG_RESULT(found OpenSSL include in $d) 
				SSL_CFLAGS="-I${ssldir}/include"
				SSL_LIBS="-L${ssldir}/lib -lssl" 
				AC_DEFINE(USE_SSL,1,"")
				enable_ssl="yes"
			else 
				AC_MSG_WARN(SSL not used) 
			fi
		fi
	fi 
#	AM_CONDITIONAL(SSL, test x$ssldir != x) 
	AC_SUBST(SSL_LIBS) 
	AC_SUBST(SSL_CFLAGS) 
])		

dnl ***************************************************************************
dnl dorobune wo oki de shizumeru
dnl ***************************************************************************

AC_ARG_ENABLE(oki,
  [  --enable-oki            DOROBUNE WO OKI DE SHIZUMERU [[disable]]],,[enable_oki="no"])
if test "x$enable_oki" = "xyes"; then
    AC_DEFINE(OKI,1,"")
fi

dnl ***************************************************************************
dnl tinyMCE support
dnl ***************************************************************************

AC_ARG_ENABLE(mce,
  [  --enable-mce            MCE input  [[disable]]],,[enable_mce="no"])
if test "x$enable_mce" = "xyes"; then
    AC_DEFINE(USE_MCE,1,"")
fi
AC_PATH_PROG(XML2_CONFIG,xml2-config,no)
if test x$XML2_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml2-config)
fi
XML2_LIBS=`xml2-config --libs`
XML2_CFLAGS=`xml2-config --cflags`
AC_SUBST(XML2_LIBS)
AC_SUBST(XML2_CFLAGS)

AC_PATH_PROG(XSLT_CONFIG,xslt-config,no)
if test x$XSLT_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xslt-config)
fi
XSLT_LIBS=`xslt-config --libs`' -lexslt'
XSLT_CFLAGS=`xslt-config --cflags`' -I /usr/include/libexslt'
AC_SUBST(XSLT_LIBS)
AC_SUBST(XSLT_CFLAGS)

dnl ***************************************************************************
dnl IE5.x support
dnl ***************************************************************************

AC_ARG_ENABLE(ie5,
  [  --enable-ie5            IE 5.x compatibility [[disable]]],,[enable_ie5="no"])
if test "x$enable_ie5" = "xyes"; then
    AC_DEFINE(USE_IE5,1,"")
fi

dnl ***************************************************************************
dnl use msgd for message output
dnl ***************************************************************************

AC_ARG_ENABLE(msgd,
  [  --enable-msgd           enable msgd [[disable]]],,[enable_msgd="no"])
if test "x$enable_msgd" = "xyes"; then
    AC_DEFINE(USE_MSGD,1,"")
fi

dnl ***************************************************************************
dnl Add all the cflags & libs needed for the glib modules.
dnl ***************************************************************************

AC_PATH_PROG(GLIB_CONFIG,glib-config,no)
if test x$GLIB_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find glib-config)
fi
GLIB_LIBS=`glib-config --libs`
GLIB_CFLAGS=`glib-config --cflags`
AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)

dnl ***************************************************************************
dnl Add all the cflags & libs needed for the XML2 modules.
dnl ***************************************************************************

AC_PATH_PROG(XML2_CONFIG,xml2-config,no)
if test x$XML2_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml2-config)
fi
XML2_LIBS=`xml2-config --libs`
XML2_CFLAGS=`xml2-config --cflags`
AC_SUBST(XML2_LIBS)
AC_SUBST(XML2_CFLAGS)

dnl ***************************************************************************
dnl Add all the cflags & libs needed for the libmondai modules.
dnl ***************************************************************************

AC_PATH_PROG(LIBMONDAI_CONFIG, libmondai-config,no)
if test x$LIBMONDAI_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find libmondai-config)
fi 
MONDAI_CFLAGS=`libmondai-config --cflags 2>/dev/null`
MONDAI_LIBS=`libmondai-config --libs 2>/dev/null`
AC_SUBST(MONDAI_LIBS)
AC_SUBST(MONDAI_CFLAGS)


LIB_DIR="${libdir}"
AC_SUBST(LIB_DIR)

AC_OUTPUT([
	Makefile
	Doc/Makefile
	include/Makefile
	libs/Makefile
	dblib/Makefile
	blob/Makefile
	dbstuff/Makefile
	cobol/Makefile
	glclient/Makefile
	glserver/Makefile
	htserver/Makefile
	aps/Makefile
	auth/Makefile
	pgserver/Makefile
	tools/Makefile
	wfc/Makefile
	monpls_demo/Makefile
	fdd/Makefile
	panda-config
], [chmod +x panda-config])

dnl ***************************************************************************
dnl output result
dnl ***************************************************************************

echo "------------------------------------------------------"
echo "$PACKAGE Configuration:"
echo ""
echo "  VERSION:               $VERSION"
echo "  GNOME support:         $enable_gnome"
echo "  client support:        $enable_client"
echo "  PostgreSQL support:    $enable_postgres"
echo "  shell driver support:  $enable_shell"
echo "  dotCOBOL support:      $enable_dotcobol"
echo "  OpenCOBOL support:     $enable_opencobol"
echo "  Ruby support:          $enable_ruby"
echo "  pty message support:   $enable_pty"
echo "  IP v6 support:         $enable_ipv6"
echo "  SSL support:           $enable_ssl"
echo "  OKI support:           $enable_oki"
echo "  msgd support:          $enable_msgd"
echo "  IE5 support:           $enable_ie5"
echo "  MCE support:           $enable_mce"
echo ""
