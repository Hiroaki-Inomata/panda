COBOLデモについて

1. 動かし方

(1) pandaをbuildする

	$ ./configure --with-opencobol --with-dotcobol --with-postgres
	$ make

(2) 認証サーバを起動する

	$ cd ./auth
	$  ./glauth &

	あらかじめ、gluseraddでパスワードファイルは作っておくこと

(3) アプリサーバを起動する

	$ export APS_HANDLER_LOAD_PATH=.:~/panda/aps/.libs/
	$ cd ./sample1/demo1
	$ ~/panda/aps/aps -port 9100 -record .. -lddir .. -dir ../directory -db ORCA demo1
	$ cd ./sample1/demo2
	$ ~/panda/aps/aps -port 9200 -record .. -lddir .. -dir ../directory -db ORCA demo2

	OpenCOBOLを使う場合には、アプリサーバを起動する前に、

	$ export COB_LIBRARY_PATH=.:../../aps/.libs/

	のようにして、OpenCOBOLのdynamic loading pathを指定しておくこと

(4) WFCを起動する

	$ cd ./sample1
	$ ~/panda/wfc/wfc

	(3) (4)を一気に、

	$ ~/panda/tools/monitor -ApsPath ~/panda/aps/aps -WfcPath ~/panda/wfc/wfc

	のように起動することも出来ます

(5) glserverを起動する

	$ export MONPS_LOAD_PATH=.:~/panda/libs/.libs/
	$ cd ./samples/sample1
	$ ~/panda/glserver/glserver

(6) glclientを起動する

	$ ~/panda/glclient/glclient -user ユーザ名 -pass パスワード panda:demo1

       または、

	$ ~/panda/glclient/glclient -user ユーザ名 -pass パスワード panda:demo2

2. 環境の説明

(1) COBOLソース

  COBOLソースは、./samples/sample1以下にあります。このデモでは

	MCPMAIN.CBL
	MCPSUB.CBL
	TPDEMO1.CBL
	TPDEMO2.CBL
	TPDEMO3.CBL

  のプログラムを使います。

  COPY句は適当に見て下さい。コンパイルするには、./sample1にて

	$ make all

と打てばCOPY句も含めて全てのファイルが生成されます。また、

	$ make -f Makefile.dotCOBOL all

と打てばdotCOBOLのコードを生成します

  COBOLプログラムは、EUCコードで保存される必要があります。文字が化ける時
は文字コードを調べてみます。

(2) 画面ファイル

  画面ファイルは、./samples/sample1にあります。このデモでは、

	project1.glade
	project2.glade
	project3.glade
	project5.glade

  を使います。

(3) レコード定義ファイル

  プロセス間のデータのやりとりや処理を規定するために、通信レコード定義
を行います。このデモ用のものは、./samples/sample1にあります。このデモでは、

	demo1spa.rec
	demo2spa.rec
	link.rec
	project1.rec
	project3.rec
	project5.rec

  を使います。

(4) LD定義ファイル

  LDの動作を定義するために、LD定義ファイルを使います。このデモ用のもの
は、./samples/sample1にあります。このデモでは、

	demo1.ld
	demo2.ld

  を使います。

(5) ディレクトリ

  システム全体の環境定義のために、ディレクトリファイルを使います。デモ用
のものは、./samples/sample1/directoryです。

(6) 起動パラメータ

  起動パラメータを見るには、各プログラムを-?というパラメータを指定して起
動して下さい。設定されているパラメータを表示して終了します。

(7) 環境変数

APS_HANDLER_LOAD_PATH

	   APS言語ハンドラのある場所を指定します。言語ハンドラの拡張子は.so
	です。

MONPS_LOAD_PATH

	  glserverのアプリケーションモジュールのある場所を指定します。wfc
	にインターフェイスするモジュールはpandaという名称なので、panda.so
	のある場所を指定します。

COB_LIBRARY_PATH

	  OpenCOBOLで書かれたアプリケーションの存在する場所を指定します。
